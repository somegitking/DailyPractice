springboot
1. 클래스 객체  mylist-boot 만들기


javascript

1. 빈객체 생성하기
var obj = Object.create(null);

2. obj.hasOwnProperty("hashCode")
// => hasOwnProperty()는 기본 객체를 생성한 이후에
//    개발자가 추가한 프로퍼티인지 검사한다.

3. 객체에 값을 저장할 수 있다.
obj.title = "제목입니다.";
obj["content"] = "내용입니다.";
obj['viewCount'] = 120;

4. 객체에 함수의 주소를 저장할 수 있다.
// 물론 그 값으로 함수 객체의 주소를 저장할 수 있다.
function f1(a, b) {
  return a + b;
}
obj.plus1 = f1; // 함수명은 그 자체가 함수 객체의 주소를 갖고 있는 변수이다.

5. 객체 property를 추가할 수 있다.

6. 객체에 다른 객체의 주소를 저장할 수 있다.
var obj2 = new Object();
obj2.v1 = 100;
obj.other = obj2;
console.log(obj.other.v1); // 자바의 OGNL(Object Graph Navigation Language)와 비슷하다.

7. 같은 객체에 소속된 멤버(변수나 합수, 객체)를 사


8. 기본 객체를 생성하는 단축 문법 사용가능

var obj = {}; //new Object();

9. 객체 생성과 property 추가 동시에 하는 방법
var obj = {
	name: "홍길동",
	kor: 100,
	aver: function() {
	    return this.sum() / 3;
	}
};



10. arrow function 객체 property 등록
// arrow fuction을 객체의 프로퍼티로 등록할 때,
// => arrow function에서 this는 소속된 객체가 아니라 window 객체를 가리킨다.
// => 그에 비해 일반 함수나 익명 함수에서 사용하는 this는 자신이 소속된 객체를 가리킨다.

var obj = {
	sum: () => this.kor + this.eng + this.math,
	aver: () => this.sum() / 3,
};

//console.log(obj.sum()); // this 즉 window 객체에 kor, eng, math라는 변수가 없기 때문에
                        // 리턴 값은 NaN이다.
//console.log(obj.aver()); // 마찬가지로 this 즉 window 객체에 sum() 함수가 없기 때문에
                         // 함수 실행 중에 오류가 발생한다.



10. 생성자 함수

// 생성자 함수는 일반 함수와 다르게
// 메서드 이름을 명사구 형태로 짓는다.
function Score(name, kor, eng, math) {
    this.name = name;
    this.kor = kor;
    this.eng = eng;
    this.math = math;
    this.sum = function() {
        return this.kor + this.eng + this.math
    };
    this.aver = function() {
        return this.sum() / 3
    }
}

var scores = [];
scores[0] = new Score("홍길동", 100, 100, 100);
scores[1] = new Score("임꺽정", 90, 90, 90);
scores[2] = new Score("유관순", 80, 80, 80);

11. 배열을 이용하여 객체 여러개 생성
// 배열을 이용하여 여러 개의 객체를 다루기
var scores = []; //new Array();
scores[0] = new Object();
scores[0].name = "홍길동";
...

12. 함수를 이용해 객체 초기화시키기
// 함수를 이용하여 객체를 초기화시키기
function createScore(name, kor, eng, math) {
	var obj = new Object();
	obj.name = name;
	obj.kor = kor;
	obj.eng = eng;
	obj.math = math;
	obj.sum = kor + eng + math;
	obj.aver = obj.sum / 3;
	return obj;
}

var scores = []; // new Array();
scores[0] = createScore("홍길동", 100, 100, 100);



13. 함수를 생성자처럼 사용하기
function createScore() {
	// 자바스크립트는 생성자를 정의하는 문법이 따로 없다.
	// 일반 함수를 생성자처럼 사용한다.
	// => new 명령을 사용하여 외부에서 빈 객체를 생성한 후,
	// => 일반 함수를 호출한다.
	// => 외부에서 생성한 객체는 this를 통해 접근할 수 있다.
	// => 만약 new 명령없이 이 함수를 호출한다면 this는 undefined 이다.
	console.log(this);
}

//일반 함수를 생성자로서 사용한다는 의미?
// => new 명령 다음에 즉시 호출하는 것을 의미한다.
// => 예) new createScore();
var obj1 = new createScore();
console.log("-----------------------");

//일반 함수로 사용한다면 this에는 어떤 주소도 들어 있지 않다.
var obj2 = createScore();


13. 메모리절약
// 자바스크립트는 자바처럼 설계도(클래스)를 기반으로 객체를 만드는 것이 아니라
// 기본 객체에 필요한 변수나 함수를 추가하는 방식으로 객체를 만든다.
// 그러다보니 sum()과 aver() 함수처럼 객체가 사용하는 함수는
// 객체를 만들 때 마다 매번 정의하여 객체에 추가해야 한다.
// 즉 메모리 낭비가 발생한다.
// 해결책?
// => 객체가 사용하는 함수를 공유하면 메모리 낭비 문제를 해결할 수 있다.
/*
this.sum = function() {
    return this.kor + this.eng + this.math
};
this.aver = function() {
    return this.sum() / 3
}
*/
}

14. prototype 이란 무엇인가?

// 1) 자바스크립트 함수는 객체이다. 즉 "함수 = 객체 + 함수코드" 이다.
// 2) 각각의 함수 객체는 prototype 이라는 공용 저장소를 갖고 있다.
// 3) prototype에 저장된 프로퍼티는 그 함수를 통해 초기화된 모든 객체가 공통으로 사용할 수 있다.
Score.prototype.sum = function() {
    return this.kor + this.eng + this.math
}

Score.prototype.aver = function() {
    return this.sum() / 3
}


15. 




















//
